#!/bin/sh
#
# A hook to disallow php syntax errors to be committed
# by running php -l (lint) on them. It requires php-cli
# to be installed.
#
# This is a pre-commit hook.
#
# To install this you can either copy or symlink it to
# $GIT_DIR/hooks, example:
#
# ln -s ../../git-tools/hooks/pre-commit \\
#   .git/hooks/pre-commit

# NOTE: this is run through /usr/bin/env
PHP_BIN=php

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

syntaxerror=0
syntaxerrors=""
spaceserror=0
spaceserrors=""
spacetabserror=0
spacetabserrors=""

if ! which $PHP_BIN >/dev/null 2>&1
then
	echo "PHP Syntax check failed:"
	echo "PHP binary does not exist or is not in path: $PHP_BIN"
	exit 1
fi

# dash does not support $'\n':
# http://forum.soft32.com/linux2/Bug-409179-DASH-Settings-IFS-work-properly-ftopict70039.html
IFS='
'
# get a list of staged files
for line in $(git diff-index --cached --full-index $against)
do
	# split needed values
	sha=$(echo $line | cut -d' ' -f4)
	temp=$(echo $line | cut -d' ' -f5)
	status=$(echo $temp | cut -d'	' -f1)
	filename=$(echo $temp | cut -d'	' -f2)

	# file extension
	ext=$(echo $filename | sed 's/^.*\.//')

	# do not check deleted files
	if [ $status = "D" ]
	then
		continue
	fi

	# check content for wrong trailling whitespace characters
	result=$(git cat-file -p $sha | grep -E --line-number --regexp="[[:space:]]$")

	if [ $? -eq 0 ]
	then
		spaceserror=2
		# Swap back in the correct filenames
		spaceserrors=$(echo "$spaceserrors"; echo "->$filename:"; echo "$result")
	fi

	# check content for wrong trailling whitespace characters
	result=$(git cat-file -p $sha | grep --line-number $' \t')

	if [ $? -eq 0 ]
	then
		spacetabserror=4
		# Swap back in correct filenames
		spacetabserrors=$(echo "$spacetabserrors"; echo "->$filename:"; echo "$result")
	fi


	# only check files with php extension for syntax problems
	if [ $ext != "php" ]
	then
		continue
	fi

	# check the staged file content for syntax errors
	# using php -l (lint)
	result=$(git cat-file -p $sha | /usr/bin/env $PHP_BIN -l 2>/dev/null)

	# $? May contain 0 when syntax errors occur, at least, in windows. A check to the output is required
	$(echo $result | grep -q "Errors parsing")

	if [ $? -eq 0 ]
	then
		syntaxerror=1
		# Swap back in correct filenames
		syntaxerrors=$(echo "$syntaxerrors"; echo "$result" |sed -e "s@in - on@in $filename on@g")
	fi

done
unset IFS

# Note: -ne -> Not Equal to
if [ $syntaxerror -ne 0 ]
then
	echo -e "PHP Syntax check failed:";
	echo -e "$syntaxerrors" | grep "^Parse error:"
fi

if [ $spaceserror -ne 0 ]
then
	echo -e -n "\nWrong line trailling characters:";
	echo -e "$spaceserrors"
fi

if [ $spacetabserror -ne 0 ]
then
	echo -e -n "\nSpaces before tabs were detected:";
	echo -e "$spacetabserrors"
fi

if [ $syntaxerror -ne 0 -o $spaceserror -ne 0 -o $spacetabserror -ne 0 ]
then
	exit $(($syntaxerror + $spaceserror + $spacetabserror))
fi
